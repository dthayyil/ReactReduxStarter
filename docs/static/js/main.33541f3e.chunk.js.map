{"version":3,"sources":["components/Layout.tsx","store/login.ts","store/search.ts","components/search.tsx","components/home.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx","store/configureStore.ts"],"names":["props","children","actionCreators","login","username","password","dispatch","getState","appState","isAuthenticated","toast","info","fetch","then","response","json","data","Present","i","results","length","element","name","birth_year","type","user","userName","error","unloadedState","logout","emptySearch","isLoading","GetSearch","text","Search","e","setState","searchText","target","value","searchCount","state","allowedCount","SelectPlanet","x","seletedplanets","setTimeout","className","id","placeholder","this","onChange","map","Value","parseInt","population","Size","isNaN","Style","fontSize","key","onClick","style","colSpan","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","React","connect","search","Store","Home","UsernameUpdate","PasswordUpdate","LogIn","LogOut","LoginStore","Layout","exact","path","component","Boolean","window","location","hostname","match","reducers","incomingAction","undefined","action","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.33541f3e.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { ToastContainer} from 'react-toastify';\r\n\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>   \r\n            {props.children} \r\n            <ToastContainer/>\r\n    </React.Fragment>\r\n);\r\n","import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport interface UserAuth {\r\n isAuthenticated: boolean;\r\n   user:User;\r\n}\r\n\r\nexport interface User {\r\n   userName:string;\r\n   password:string;\r\n}\r\n\r\ninterface RequestLogin {\r\n    type: 'REQUEST_LOGIN';\r\n   data:UserAuth\r\n}\r\n\r\ninterface ReceiveLogin {\r\n    type: 'RECEIVE_LOGIN';\r\n    data:UserAuth\r\n\r\n}\r\n\r\ntype KnownAction = RequestLogin | ReceiveLogin;\r\n\r\nexport const actionCreators = {\r\n    login: (username: string,password:string): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.login?.isAuthenticated===false && username !== \"\" && password!==\"\") {\r\n            toast.info(\"Please wait.\")       \r\n            fetch(`https://swapi.co/api/people/?search=${username}`)\r\n                .then(response => response.json() as Promise<any>)\r\n                .then(data => {\r\n                    \r\n                    let Present :boolean =false;\r\n                    for (var i = 0; i <  data.results.length; ++i) {\r\n                        let element = data.results[i];\r\n                       \r\n                        if(element.name===username&&element.birth_year ===password)\r\n                        {\r\n                            Present= true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(Present)\r\n                    {\r\n                        dispatch({ type: 'RECEIVE_LOGIN',\r\n                                  data:{isAuthenticated :true, \r\n                                        user:{password:password,userName:username }\r\n                                       }\r\n                                });        \r\n                    }\r\n                    else{\r\n                        toast.error(\"Username or Password invalid\")       \r\n                    }          \r\n                });\r\n\r\n                dispatch({ type: 'REQUEST_LOGIN', data:unloadedState });\r\n        }\r\n        else\r\n        {\r\n            toast.error(\"Please enter Username or Password\")\r\n        }\r\n    },\r\n    logout:():AppThunkAction<KnownAction>=>(dispatch)=>{\r\n        dispatch({ type: 'REQUEST_LOGIN', data:unloadedState });\r\n    }\r\n};\r\n\r\n\r\nconst unloadedState: UserAuth = { user:{userName :\"\",password:\"\"},isAuthenticated:false };\r\n\r\nexport const reducer: Reducer<UserAuth> = (state: UserAuth | undefined, incomingAction: Action): UserAuth => {\r\n\r\n   \r\n     \r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_LOGIN':\r\n            return {\r\n            isAuthenticated:false,\r\n            user: { password:\"\",userName:\"\"}\r\n            };\r\n        case 'RECEIVE_LOGIN':        \r\n            return action.data;     \r\n            \r\n        default:\r\n                return state;       \r\n    }\r\n\r\n};\r\n","import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface Result {\r\n    name: string;\r\n    rotation_period: string;\r\n    orbital_period: string;\r\n    diameter: string;\r\n    climate: string;\r\n    gravity: string;\r\n    terrain: string;\r\n    surface_water: string;\r\n    population: string;\r\n    residents: string[];\r\n    films: string[];\r\n    created: Date;\r\n    edited: Date;\r\n    url: string;\r\n}\r\n\r\nexport interface Search {\r\n    isLoading:boolean;\r\n    results: Result[];\r\n}\r\n\r\n\r\ninterface RequestSearch {\r\n    type: 'REQUEST_SEARCH';\r\n   data:Search\r\n}\r\n\r\ninterface ReceiveSearch {\r\n    type: 'RECEIVE_SEARCH';\r\n    data:Search\r\n}\r\n\r\ntype KnownAction = RequestSearch | ReceiveSearch;\r\n\r\nconst emptySearch : Search = { isLoading:true,results:[] };\r\n\r\nexport const actionCreators = {\r\n    GetSearch: (text: string): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState  && text !== \"\" ) {\r\n            fetch(`https://swapi.co/api/planets?search=${text}`)\r\n                .then(response => response.json() as Promise<any>)\r\n                .then(data => {                     \r\n                    dispatch({ type: 'RECEIVE_SEARCH', data:{isLoading:false,results:data.results } });                    \r\n                });\r\n             //   dispatch({ type: 'REQUEST_SEARCH', data:unloadedState });\r\n        }\r\n    },\r\n     \r\n};\r\n\r\nexport const reducer: Reducer<Search> = (state: Search | undefined, incomingAction: Action): Search => {\r\n\r\n     \r\n    if (state === undefined) {\r\n        return emptySearch;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_SEARCH':\r\n            return emptySearch;\r\n        case 'RECEIVE_SEARCH':        \r\n            return action.data;     \r\n            \r\n        default:\r\n                return state;       \r\n    }\r\n\r\n};","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as  Store from '../store/search';\r\nimport * as  LoginStore from '../store/login';\r\nimport { toast } from 'react-toastify';\r\n\r\ntype BaseProps =   \r\n    typeof Store.actionCreators &     \r\n    RouteComponentProps<{}>;\r\n\r\ninterface Props extends BaseProps{\r\n    login: LoginStore.UserAuth,\r\n    Search: Store.Search\r\n}    \r\n\r\ninterface state  {\r\n    searchText:string ;\r\n    seletedplanets:Store.Result|null;\r\n    searchCount:number;  \r\n    allowedCount:number;  \r\n}\r\n\r\nconst UnlimitedUser:string =\"Luke Skywalker\";\r\n\r\nclass Search extends React.Component<Props,state> {\r\n\r\n    constructor(props:Props)\r\n    {\r\n        super(props)\r\n        this.state={\r\n            searchText:'',\r\n            seletedplanets:null,\r\n            searchCount:0,\r\n            allowedCount:15\r\n        }\r\n    }\r\n    \r\n    Search =(e:any)=>{\r\n        this.setState({\r\n            searchText :e.target.value,\r\n            searchCount:this.state.searchCount+1,\r\n        })\r\n\r\n        if(this.props.login.user.userName ===UnlimitedUser||(this.state.allowedCount>this.state.searchCount)){\r\n            this.props.GetSearch(e.target.value)\r\n        }\r\n        else {\r\n            toast.error(\"Search Limit Exceed\")\r\n        }\r\n    }\r\n\r\n    SelectPlanet=(x:Store.Result)=>{\r\n        this.setState({seletedplanets:x})\r\n    }\r\n    \r\n    componentDidMount(){\r\n        setTimeout(() => {\r\n            this.setState({\r\n                searchCount:0\r\n            })\r\n          }, 60000);\r\n    }\r\n\r\n    public render() {      \r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"search-box\">\r\n                                <div className=\"basic-search\">\r\n                                    <div className=\"input-field\">\r\n                                    <input id=\"search\" type=\"text\" \r\n                                           placeholder=\"Type Keywords\" \r\n                                           value={this.state.searchText} \r\n                                           onChange={(e)=>this.Search(e)}  />\r\n                                    {/* <div className=\"icon-wrap\">\r\n                                        <svg className=\"svg-inline--fa fa-search fa-w-16\" fill=\"#ccc\" aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"search\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n                                        <path d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"></path>\r\n                                        </svg>\r\n                                    </div> */}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row mt-3\">\r\n                                    <div className=\"col\">\r\n                                        <div className=\"list-type1\">\r\n                                            <ol>\r\n                                                \r\n                                                    {this.props.Search.results.map((x)=>\r\n                                                       {\r\n                                                            let Value :number = parseInt(x.population) / 100000;\r\n                                                            let Size:number=15;\r\n                                                            \r\n                                                            if(!isNaN(Value))\r\n                                                            {\r\n                                                                if(Value>=10000000)\r\n                                                                {\r\n                                                                    Size=30;\r\n                                                                }\r\n                                                                else if(Value>=1000000)\r\n                                                                {\r\n                                                                    Size=25;\r\n                                                                }\r\n                                                                else if(Value>=100000)\r\n                                                                {\r\n                                                                    Size=20;\r\n                                                                }\r\n                                                                else if(Value>=10000)\r\n                                                                {\r\n                                                                    Size=18;\r\n                                                                }\r\n                                                                else if(Value>=1000)\r\n                                                                {\r\n                                                                    Size=16;\r\n                                                                }\r\n                                                                else if(Value>=100)\r\n                                                                {\r\n                                                                    Size=15;\r\n                                                                }\r\n                                                            } \r\n                                                            let Style ={\r\n                                                                fontSize:`${Size}px`\r\n                                                            }\r\n\r\n                                                           return (\r\n                                                            <li key={x.name} onClick={ ()=> this.SelectPlanet(x)}>\r\n                                                            <div   style={Style}>\r\n                                                             {x.name } </div>\r\n                                                            </li>\r\n                                                           )\r\n                                                       }\r\n                                                    )}\r\n                                            </ol>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                    <div>\r\n                                            {this.state.seletedplanets!=null?(\r\n                                                <div className=\"col-8\">\r\n                                                    <table className=\"table table-dark table-bordered\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <td colSpan={2}> <h1> {this.state.seletedplanets.name} </h1></td>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            <tr>\r\n                                                                <td>Rotation Period</td>\r\n                                                                <td> {this.state.seletedplanets.rotation_period} </td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Orbital Period</td>\r\n                                                                <td>{this.state.seletedplanets.orbital_period}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Diameter</td>\r\n                                                                <td>{this.state.seletedplanets.diameter}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Climate</td>\r\n                                                                <td>{this.state.seletedplanets.climate}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Gravity</td>\r\n                                                                <td>{this.state.seletedplanets.gravity}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Terrain</td>\r\n                                                                <td>{this.state.seletedplanets.terrain}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Surface Water</td>\r\n                                                                <td>{this.state.seletedplanets.surface_water}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Population</td>\r\n                                                                <td>{this.state.seletedplanets.population}</td>\r\n                                                            </tr>\r\n                                                            {/* <tr>\r\n                                                                <td>Residents</td>\r\n                                                                <td>{this.state.seletedplanets.residents}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>Films</td>\r\n                                                                <td>{this.state.seletedplanets.films.map((film,index)=>(\r\n                                                                    <span key={index}>{ film} </span>\r\n                                                                ))}</td>\r\n                                                            </tr> */}\r\n                                                                \r\n\r\n                                                        </tbody>\r\n                                                    </table> \r\n                                                </div> \r\n                                            ):(null)\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: ApplicationState) => ({\r\n    login: state.login,\r\n    Search: state.search\r\n});\r\n\r\n// const mapDispatchToProps = dispatch =>\r\n//     bindActionCreators({ refresh, refereshViewCart }, dispatch);\r\n\r\n// export const AddtoCartButton = connect(mapStateToProps, mapDispatchToProps)(AddtoCartPage)\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,    \r\n    Store.actionCreators\r\n)(Search as any);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as LoginStore from '../store/login';\r\nimport Search from './search';\r\n\r\n\r\ntype Props =\r\n    LoginStore.UserAuth &    \r\n    typeof LoginStore.actionCreators &   \r\n    RouteComponentProps<{}>;\r\ninterface state {\r\n    username:string ;\r\n    password:string ;\r\n    \r\n}\r\n\r\n\r\nclass Home extends React.Component<Props,state> {\r\n\r\n    constructor(props:Props)\r\n    {\r\n        super(props)\r\n        this.state={\r\n            password:'',\r\n            username:'' \r\n        }\r\n    }\r\n\r\n    UsernameUpdate =(e:any)=>{\r\n        this.setState({\r\n            username :e.target.value\r\n        })\r\n    }\r\n\r\n    PasswordUpdate =(e:any)=>{\r\n        this.setState({\r\n            password :e.target.value\r\n        })\r\n    }\r\n\r\n    LogIn=()=>{      \r\n        this.props.login(this.state.username,this.state.password)\r\n    }\r\n\r\n    LogOut=()=>{\r\n        this.props.logout()\r\n    }\r\n\r\n    \r\n    public render() {      \r\n        return (\r\n            <React.Fragment>\r\n               {this.props.isAuthenticated?(\r\n                   <div>\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <span className=\"navbar-brand\">Starwar Planets Search</span> \r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav ml-auto\"> \r\n                        <li className=\"nav-item\">\r\n                            <button className=\"btn btn-outline-danger my-2 my-sm-0\" onClick={this.LogOut} >Log out</button>\r\n                        </li>\r\n                        </ul>\r\n                    </div>\r\n                    </nav>\r\n                    <Search  />\r\n                    </div>\r\n                   \r\n               ):(\r\n\r\n        <div className=\"wrapper fadeInDown\">\r\n            <div id=\"formContent\"> \r\n                <div>\r\n                <input type=\"text\"  \r\n                       placeholder=\"Username\" \r\n                       className=\"fadeIn second\"\r\n                       value={this.state.username}\r\n                       onChange={(e)=>this.UsernameUpdate(e)} />\r\n                 <input \r\n                     type=\"password\" \r\n                     placeholder=\"Password\" \r\n                     className=\"fadeIn third\"\r\n                     value={this.state.password}\r\n                     onChange={(e)=>this.PasswordUpdate(e)}\r\n                     />\r\n                 <button type=\"button\"\r\n                    className=\"fadeIn fourth submmit\"\r\n                    onClick={  this.LogIn }>\r\n                    Sign In\r\n                </button> \r\n                \r\n                </div>\r\n                </div>\r\n            </div>\r\n              )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.login,    \r\n    LoginStore.actionCreators\r\n)(Home as any);\r\n","import React from 'react';\nimport { Route } from 'react-router';\nimport './App.css';\nimport Layout from './components/Layout';\nimport Home from './components/home'\n\nexport default () => (\n  <Layout>\n      <Route exact path='/' component={Home} />    \n  </Layout>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Login from './login';\r\nimport * as Search from './search';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n      login: Login.UserAuth| undefined;\r\n      search: Search.Search| undefined; \r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n       login: Login.reducer,\r\n       search: Search.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport { createBrowserHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\n\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\nconst history = createBrowserHistory({ basename: baseUrl });\nconst store = configureStore(history);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <App />\n            </ConnectedRouter>\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}